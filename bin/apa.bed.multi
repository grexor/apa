#!/usr/bin/python

import apa
import sys
import glob
from Queue import *
from threading import *
import os

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-type', action="store", dest="type", default="raw") # raw or expression
parser.add_argument('-lib_id', action="store", dest="lib_id", default=None)
parser.add_argument('-poly_id', action="store", dest="poly_id", default=None)
parser.add_argument('-map_id', action="store", dest="map_id", type=int, default=1)
args = parser.parse_args()

num_worker_threads = 40
q = Queue()

def worker():
    while True:
        task = q.get()
        os.system(task)
        q.task_done()

# get experiments
e_ids = apa.annotation.libs[args.lib_id].experiments.keys()

# raw
tasks = []
for e_id in e_ids:
    tasks.append("apa.bed -type %s -lib_id %s -exp %s -force -poly_id %s -map_id %s" % (args.type, args.lib_id, e_id, args.poly_id, args.map_id))
    print tasks[-1] # print the last added task

for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for task in tasks:
    q.put(task)

q.join()
