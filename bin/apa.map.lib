#!/usr/bin/python

import apa
import sys
import glob
import pybio
from Queue import *
from threading import *
import os

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-lib_id', action="store", dest="lib_id")
parser.add_argument('-map_id', action="store", dest="map_id", type=int, default=1)
parser.add_argument('-mapper', action="store", dest="mapper", default="star")
parser.add_argument('-cpu', action="store", dest="cpu", default=1, type=int)
parser.add_argument('-workers', action="store", dest="workers", default=2, type=int)
parser.add_argument('-minlen', action="store", dest="minlen", default=0.66, type=float)
args = parser.parse_args()

#genome = apa.annotation.libs[args.lib_id].experiments[1]["map_to"]
#version = pybio.genomes.get_latest_version(genome)
#genome_folder = os.path.join(pybio.path.genomes_folder, "%s.assembly.%s.star" % (genome, version))

num_worker_threads = args.workers
q = Queue()

def worker():
    while True:
        task = q.get()
        os.system(task)
        q.task_done()

# STEP1: process all study data
tasks = []
#for exp_id in apa.annotation.libs[args.lib_id].experiments.keys():
for exp_id in range(223, 232):
    tasks.append("apa.map -lib_id %s -exp_id %s -force -mapper %s -cpu %s -map_id %s -minlen %s" % (args.lib_id, exp_id, args.mapper, args.cpu, args.map_id, args.minlen))

for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for task in tasks:
    q.put(task)

q.join()

# finish with mapping stats
apa.map.stats(args.lib_id, map_id=args.map_id)

# remove genome from memory
#os.system("STAR --genomeLoad Remove %s" % genome_folder)
