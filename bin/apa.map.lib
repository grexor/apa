#!/usr/bin/python3

import apa
import sys
import glob
import pybio
import os
import queue
import threading
import os

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-lib_id', action="store", dest="lib_id")
parser.add_argument('-map_id', action="store", dest="map_id", type=int, default=1)
parser.add_argument('-mapper', action="store", dest="mapper", default="star")
parser.add_argument('-cpu', action="store", dest="cpu", default=1, type=int)
parser.add_argument('-workers', action="store", dest="workers", default=2, type=int)
parser.add_argument('-minlen', action="store", dest="minlen", default=0.66, type=float)
args = parser.parse_args()

"""
semaphore = threading.Semaphore(args.workers)
def run_command(cmd):
    semaphore.acquire()
    try:
        os.system(cmd)
    finally:
        semaphore.release()
tasks = []
for exp_id in apa.annotation.libs[args.lib_id].experiments.keys():
        tasks.append("apa.map -lib_id %s -exp_id %s -force -mapper %s -cpu %s -map_id %s -minlen %s" % (args.lib_id, exp_id, args.mapper, args.cpu, args.map_id, args.minlen))

for task in tasks:
    threading.Thread(target=run_command, args=(task, )).start()

apa.map.stats(args.lib_id, map_id=args.map_id)
"""

tasks = []
for exp_id in apa.annotation.libs[args.lib_id].experiments.keys():
        tasks.append("apa.map -lib_id %s -exp_id %s -force -mapper %s -cpu %s -map_id %s -minlen %s" % (args.lib_id, exp_id, args.mapper, args.cpu, args.map_id, args.minlen))

def worker():
    while True:
        task = q.get()
        os.system(task)
        q.task_done()

num_worker_threads = args.workers
q = queue.Queue()
threads = []

for i in range(num_worker_threads):
    t = threading.Thread(target=worker)
    t.daemon = True
    t.start()
    threads.append(t)

for item in tasks:
    q.put(item)

q.join()

# stop workers
for i in range(num_worker_threads):
    q.put(None)
for t in threads:
    t.join()

apa.map.stats(args.lib_id, map_id=args.map_id)
